namespace event;



//define the events here
union EventUnion { 
    Echo,
    Error,
    Join,
    StreamStart,

    Cursor,
    DrawIncrement,
    DrawObject,

    StreamSynced,

    ClientJoined,
    ClientLeft,
}

//32 bytes overhead
table Message {
  events: [EventUnion];
}

//een struct  als een event is minimaal 8 bytes (4 overhead, stappen van 4 bytes)

//12 bytes
struct Cursor
{
    ///client id
    clientId: uint8;
    x: uint16;
    y: uint16;
}

table Echo
{
  id: uint32;
  time: uint32;
  payload: string;
}


table Error
{
  description: string;
}


//request join (send from a client to server)
table Join
{
  id: string;
  clientId: uint8; //obosolete
}


//new stream started (send from server to specific client)
table StreamStart
{
  paperId: string;
}

//stream complete, tells clientId to use as well (send from server to specific client)
table StreamSynced
{
    clientId: uint8;
}

//a client has joined (send from server to ALL clients)
table ClientJoined
{
  clientId: uint8;
}

//a client has left (send from server to ALL clients)
table ClientLeft
{
  clientId: uint8;
}





// drawing actions
// drawing actions
// drawing actions


enum ClassType:byte
{
  Line,
  Polyline,
  Rectangle,
  Circle,
}



enum IncrementalType:byte
{
    SelectColor,
    SelectClass,
    DrawObject,
    AddPoint,
    Cancel,
    Delete,
    Undo,
    Redo,

    SelectWidth,
    SelectDashing,

    Cleanup, //send by server when a client disconnects
}


/// draw command, 8 bytes
struct DrawIncrement
{
    clientId: uint8;
    type: IncrementalType;
    p1: uint16;
    p2: uint16;
    p3: uint8;
    store: bool;
}


//draw object with list of points (usually for polylines)
//always stored
table DrawObject
{
    clientId: uint8;
    points: [uint16];
}




root_type Message;
