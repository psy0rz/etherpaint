// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGES_PAPER_H_
#define FLATBUFFERS_GENERATED_MESSAGES_PAPER_H_

#include "flatbuffers/flatbuffers.h"

namespace paper {

struct Message;
struct MessageBuilder;

struct Create;
struct CreateBuilder;

struct Update;
struct UpdateBuilder;

struct Delete;
struct DeleteBuilder;

enum Event {
  Event_NONE = 0,
  Event_Create = 1,
  Event_Update = 2,
  Event_Delete = 3,
  Event_MIN = Event_NONE,
  Event_MAX = Event_Delete
};

inline const Event (&EnumValuesEvent())[4] {
  static const Event values[] = {
    Event_NONE,
    Event_Create,
    Event_Update,
    Event_Delete
  };
  return values;
}

inline const char * const *EnumNamesEvent() {
  static const char * const names[5] = {
    "NONE",
    "Create",
    "Update",
    "Delete",
    nullptr
  };
  return names;
}

inline const char *EnumNameEvent(Event e) {
  if (flatbuffers::IsOutRange(e, Event_NONE, Event_Delete)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEvent()[index];
}

template<typename T> struct EventTraits {
  static const Event enum_value = Event_NONE;
};

template<> struct EventTraits<paper::Create> {
  static const Event enum_value = Event_Create;
};

template<> struct EventTraits<paper::Update> {
  static const Event enum_value = Event_Update;
};

template<> struct EventTraits<paper::Delete> {
  static const Event enum_value = Event_Delete;
};

bool VerifyEvent(flatbuffers::Verifier &verifier, const void *obj, Event type);
bool VerifyEventVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENT_TYPE = 4,
    VT_EVENT = 6
  };
  paper::Event event_type() const {
    return static_cast<paper::Event>(GetField<uint8_t>(VT_EVENT_TYPE, 0));
  }
  const void *event() const {
    return GetPointer<const void *>(VT_EVENT);
  }
  template<typename T> const T *event_as() const;
  const paper::Create *event_as_Create() const {
    return event_type() == paper::Event_Create ? static_cast<const paper::Create *>(event()) : nullptr;
  }
  const paper::Update *event_as_Update() const {
    return event_type() == paper::Event_Update ? static_cast<const paper::Update *>(event()) : nullptr;
  }
  const paper::Delete *event_as_Delete() const {
    return event_type() == paper::Event_Delete ? static_cast<const paper::Delete *>(event()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_EVENT_TYPE) &&
           VerifyOffset(verifier, VT_EVENT) &&
           VerifyEvent(verifier, event(), event_type()) &&
           verifier.EndTable();
  }
};

template<> inline const paper::Create *Message::event_as<paper::Create>() const {
  return event_as_Create();
}

template<> inline const paper::Update *Message::event_as<paper::Update>() const {
  return event_as_Update();
}

template<> inline const paper::Delete *Message::event_as<paper::Delete>() const {
  return event_as_Delete();
}

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_event_type(paper::Event event_type) {
    fbb_.AddElement<uint8_t>(Message::VT_EVENT_TYPE, static_cast<uint8_t>(event_type), 0);
  }
  void add_event(flatbuffers::Offset<void> event) {
    fbb_.AddOffset(Message::VT_EVENT, event);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    paper::Event event_type = paper::Event_NONE,
    flatbuffers::Offset<void> event = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_event(event);
  builder_.add_event_type(event_type);
  return builder_.Finish();
}

struct Create FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CreateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DAMAGE = 6
  };
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  int16_t damage() const {
    return GetField<int16_t>(VT_DAMAGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<int16_t>(verifier, VT_DAMAGE) &&
           verifier.EndTable();
  }
};

struct CreateBuilder {
  typedef Create Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(Create::VT_TYPE, type);
  }
  void add_damage(int16_t damage) {
    fbb_.AddElement<int16_t>(Create::VT_DAMAGE, damage, 0);
  }
  explicit CreateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CreateBuilder &operator=(const CreateBuilder &);
  flatbuffers::Offset<Create> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Create>(end);
    return o;
  }
};

inline flatbuffers::Offset<Create> CreateCreate(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    int16_t damage = 0) {
  CreateBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_damage(damage);
  return builder_.Finish();
}

inline flatbuffers::Offset<Create> CreateCreateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    int16_t damage = 0) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return paper::CreateCreate(
      _fbb,
      type__,
      damage);
}

struct Update FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DAMAGE = 6
  };
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  int16_t damage() const {
    return GetField<int16_t>(VT_DAMAGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<int16_t>(verifier, VT_DAMAGE) &&
           verifier.EndTable();
  }
};

struct UpdateBuilder {
  typedef Update Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(Update::VT_TYPE, type);
  }
  void add_damage(int16_t damage) {
    fbb_.AddElement<int16_t>(Update::VT_DAMAGE, damage, 0);
  }
  explicit UpdateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UpdateBuilder &operator=(const UpdateBuilder &);
  flatbuffers::Offset<Update> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Update>(end);
    return o;
  }
};

inline flatbuffers::Offset<Update> CreateUpdate(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    int16_t damage = 0) {
  UpdateBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_damage(damage);
  return builder_.Finish();
}

inline flatbuffers::Offset<Update> CreateUpdateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    int16_t damage = 0) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return paper::CreateUpdate(
      _fbb,
      type__,
      damage);
}

struct Delete FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DeleteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DAMAGE = 6
  };
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  int16_t damage() const {
    return GetField<int16_t>(VT_DAMAGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<int16_t>(verifier, VT_DAMAGE) &&
           verifier.EndTable();
  }
};

struct DeleteBuilder {
  typedef Delete Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(Delete::VT_TYPE, type);
  }
  void add_damage(int16_t damage) {
    fbb_.AddElement<int16_t>(Delete::VT_DAMAGE, damage, 0);
  }
  explicit DeleteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DeleteBuilder &operator=(const DeleteBuilder &);
  flatbuffers::Offset<Delete> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Delete>(end);
    return o;
  }
};

inline flatbuffers::Offset<Delete> CreateDelete(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    int16_t damage = 0) {
  DeleteBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_damage(damage);
  return builder_.Finish();
}

inline flatbuffers::Offset<Delete> CreateDeleteDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    int16_t damage = 0) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return paper::CreateDelete(
      _fbb,
      type__,
      damage);
}

inline bool VerifyEvent(flatbuffers::Verifier &verifier, const void *obj, Event type) {
  switch (type) {
    case Event_NONE: {
      return true;
    }
    case Event_Create: {
      auto ptr = reinterpret_cast<const paper::Create *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Event_Update: {
      auto ptr = reinterpret_cast<const paper::Update *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Event_Delete: {
      auto ptr = reinterpret_cast<const paper::Delete *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyEventVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEvent(
        verifier,  values->Get(i), types->GetEnum<Event>(i))) {
      return false;
    }
  }
  return true;
}

inline const paper::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<paper::Message>(buf);
}

inline const paper::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<paper::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<paper::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<paper::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<paper::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<paper::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace paper

#endif  // FLATBUFFERS_GENERATED_MESSAGES_PAPER_H_
