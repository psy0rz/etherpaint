// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGES_EVENT_H_
#define FLATBUFFERS_GENERATED_MESSAGES_EVENT_H_

#include "flatbuffers/flatbuffers.h"

namespace event {

struct Message;
struct MessageBuilder;

struct Echo;
struct EchoBuilder;

struct UserEvent;
struct UserEventBuilder;

struct CursorEvent;

struct Point;

struct Color;

struct ObjectUpdateEvent;
struct ObjectUpdateEventBuilder;

struct ObjectAddPointsEvent;
struct ObjectAddPointsEventBuilder;

struct ObjectDeleteEvent;
struct ObjectDeleteEventBuilder;

inline const flatbuffers::TypeTable *MessageTypeTable();

inline const flatbuffers::TypeTable *EchoTypeTable();

inline const flatbuffers::TypeTable *UserEventTypeTable();

inline const flatbuffers::TypeTable *CursorEventTypeTable();

inline const flatbuffers::TypeTable *PointTypeTable();

inline const flatbuffers::TypeTable *ColorTypeTable();

inline const flatbuffers::TypeTable *ObjectUpdateEventTypeTable();

inline const flatbuffers::TypeTable *ObjectAddPointsEventTypeTable();

inline const flatbuffers::TypeTable *ObjectDeleteEventTypeTable();

enum EventUnion {
  EventUnion_NONE = 0,
  EventUnion_CursorEvent = 1,
  EventUnion_ObjectUpdateEvent = 2,
  EventUnion_ObjectAddPointsEvent = 3,
  EventUnion_ObjectDeleteEvent = 4,
  EventUnion_UserEvent = 5,
  EventUnion_Echo = 6,
  EventUnion_MIN = EventUnion_NONE,
  EventUnion_MAX = EventUnion_Echo
};

inline const EventUnion (&EnumValuesEventUnion())[7] {
  static const EventUnion values[] = {
    EventUnion_NONE,
    EventUnion_CursorEvent,
    EventUnion_ObjectUpdateEvent,
    EventUnion_ObjectAddPointsEvent,
    EventUnion_ObjectDeleteEvent,
    EventUnion_UserEvent,
    EventUnion_Echo
  };
  return values;
}

inline const char * const *EnumNamesEventUnion() {
  static const char * const names[8] = {
    "NONE",
    "CursorEvent",
    "ObjectUpdateEvent",
    "ObjectAddPointsEvent",
    "ObjectDeleteEvent",
    "UserEvent",
    "Echo",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventUnion(EventUnion e) {
  if (flatbuffers::IsOutRange(e, EventUnion_NONE, EventUnion_Echo)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEventUnion()[index];
}

template<typename T> struct EventUnionTraits {
  static const EventUnion enum_value = EventUnion_NONE;
};

template<> struct EventUnionTraits<event::CursorEvent> {
  static const EventUnion enum_value = EventUnion_CursorEvent;
};

template<> struct EventUnionTraits<event::ObjectUpdateEvent> {
  static const EventUnion enum_value = EventUnion_ObjectUpdateEvent;
};

template<> struct EventUnionTraits<event::ObjectAddPointsEvent> {
  static const EventUnion enum_value = EventUnion_ObjectAddPointsEvent;
};

template<> struct EventUnionTraits<event::ObjectDeleteEvent> {
  static const EventUnion enum_value = EventUnion_ObjectDeleteEvent;
};

template<> struct EventUnionTraits<event::UserEvent> {
  static const EventUnion enum_value = EventUnion_UserEvent;
};

template<> struct EventUnionTraits<event::Echo> {
  static const EventUnion enum_value = EventUnion_Echo;
};

bool VerifyEventUnion(flatbuffers::Verifier &verifier, const void *obj, EventUnion type);
bool VerifyEventUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum ObjectType {
  ObjectType_Line = 0,
  ObjectType_PolyLine = 1,
  ObjectType_Rectangle = 2,
  ObjectType_Circle = 3,
  ObjectType_MIN = ObjectType_Line,
  ObjectType_MAX = ObjectType_Circle
};

inline const ObjectType (&EnumValuesObjectType())[4] {
  static const ObjectType values[] = {
    ObjectType_Line,
    ObjectType_PolyLine,
    ObjectType_Rectangle,
    ObjectType_Circle
  };
  return values;
}

inline const char * const *EnumNamesObjectType() {
  static const char * const names[5] = {
    "Line",
    "PolyLine",
    "Rectangle",
    "Circle",
    nullptr
  };
  return names;
}

inline const char *EnumNameObjectType(ObjectType e) {
  if (flatbuffers::IsOutRange(e, ObjectType_Line, ObjectType_Circle)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesObjectType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) CursorEvent FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;
  uint32_t uid_;

 public:
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CursorEventTypeTable();
  }
  CursorEvent() {
    memset(static_cast<void *>(this), 0, sizeof(CursorEvent));
  }
  CursorEvent(int32_t _x, int32_t _y, uint32_t _uid)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        uid_(flatbuffers::EndianScalar(_uid)) {
  }
  int32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
  uint32_t uid() const {
    return flatbuffers::EndianScalar(uid_);
  }
};
FLATBUFFERS_STRUCT_END(CursorEvent, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Point FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t x_;
  uint16_t y_;

 public:
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PointTypeTable();
  }
  Point() {
    memset(static_cast<void *>(this), 0, sizeof(Point));
  }
  Point(uint16_t _x, uint16_t _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  uint16_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  uint16_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Point, 4);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) Color FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t r_;
  uint8_t g_;
  uint8_t b_;

 public:
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ColorTypeTable();
  }
  Color() {
    memset(static_cast<void *>(this), 0, sizeof(Color));
  }
  Color(uint8_t _r, uint8_t _g, uint8_t _b)
      : r_(flatbuffers::EndianScalar(_r)),
        g_(flatbuffers::EndianScalar(_g)),
        b_(flatbuffers::EndianScalar(_b)) {
  }
  uint8_t r() const {
    return flatbuffers::EndianScalar(r_);
  }
  uint8_t g() const {
    return flatbuffers::EndianScalar(g_);
  }
  uint8_t b() const {
    return flatbuffers::EndianScalar(b_);
  }
};
FLATBUFFERS_STRUCT_END(Color, 3);

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MessageTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENT_TYPE = 4,
    VT_EVENT = 6,
    VT_KUT = 8
  };
  event::EventUnion event_type() const {
    return static_cast<event::EventUnion>(GetField<uint8_t>(VT_EVENT_TYPE, 0));
  }
  const void *event() const {
    return GetPointer<const void *>(VT_EVENT);
  }
  template<typename T> const T *event_as() const;
  const event::CursorEvent *event_as_CursorEvent() const {
    return event_type() == event::EventUnion_CursorEvent ? static_cast<const event::CursorEvent *>(event()) : nullptr;
  }
  const event::ObjectUpdateEvent *event_as_ObjectUpdateEvent() const {
    return event_type() == event::EventUnion_ObjectUpdateEvent ? static_cast<const event::ObjectUpdateEvent *>(event()) : nullptr;
  }
  const event::ObjectAddPointsEvent *event_as_ObjectAddPointsEvent() const {
    return event_type() == event::EventUnion_ObjectAddPointsEvent ? static_cast<const event::ObjectAddPointsEvent *>(event()) : nullptr;
  }
  const event::ObjectDeleteEvent *event_as_ObjectDeleteEvent() const {
    return event_type() == event::EventUnion_ObjectDeleteEvent ? static_cast<const event::ObjectDeleteEvent *>(event()) : nullptr;
  }
  const event::UserEvent *event_as_UserEvent() const {
    return event_type() == event::EventUnion_UserEvent ? static_cast<const event::UserEvent *>(event()) : nullptr;
  }
  const event::Echo *event_as_Echo() const {
    return event_type() == event::EventUnion_Echo ? static_cast<const event::Echo *>(event()) : nullptr;
  }
  uint32_t kut() const {
    return GetField<uint32_t>(VT_KUT, 123);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_EVENT_TYPE) &&
           VerifyOffset(verifier, VT_EVENT) &&
           VerifyEventUnion(verifier, event(), event_type()) &&
           VerifyField<uint32_t>(verifier, VT_KUT) &&
           verifier.EndTable();
  }
};

template<> inline const event::CursorEvent *Message::event_as<event::CursorEvent>() const {
  return event_as_CursorEvent();
}

template<> inline const event::ObjectUpdateEvent *Message::event_as<event::ObjectUpdateEvent>() const {
  return event_as_ObjectUpdateEvent();
}

template<> inline const event::ObjectAddPointsEvent *Message::event_as<event::ObjectAddPointsEvent>() const {
  return event_as_ObjectAddPointsEvent();
}

template<> inline const event::ObjectDeleteEvent *Message::event_as<event::ObjectDeleteEvent>() const {
  return event_as_ObjectDeleteEvent();
}

template<> inline const event::UserEvent *Message::event_as<event::UserEvent>() const {
  return event_as_UserEvent();
}

template<> inline const event::Echo *Message::event_as<event::Echo>() const {
  return event_as_Echo();
}

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_event_type(event::EventUnion event_type) {
    fbb_.AddElement<uint8_t>(Message::VT_EVENT_TYPE, static_cast<uint8_t>(event_type), 0);
  }
  void add_event(flatbuffers::Offset<void> event) {
    fbb_.AddOffset(Message::VT_EVENT, event);
  }
  void add_kut(uint32_t kut) {
    fbb_.AddElement<uint32_t>(Message::VT_KUT, kut, 123);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    event::EventUnion event_type = event::EventUnion_NONE,
    flatbuffers::Offset<void> event = 0,
    uint32_t kut = 123) {
  MessageBuilder builder_(_fbb);
  builder_.add_kut(kut);
  builder_.add_event(event);
  builder_.add_event_type(event_type);
  return builder_.Finish();
}

struct Echo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EchoBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return EchoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TIME = 6,
    VT_PAYLOAD = 8
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t time() const {
    return GetField<uint32_t>(VT_TIME, 0);
  }
  const flatbuffers::String *payload() const {
    return GetPointer<const flatbuffers::String *>(VT_PAYLOAD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<uint32_t>(verifier, VT_TIME) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyString(payload()) &&
           verifier.EndTable();
  }
};

struct EchoBuilder {
  typedef Echo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Echo::VT_ID, id, 0);
  }
  void add_time(uint32_t time) {
    fbb_.AddElement<uint32_t>(Echo::VT_TIME, time, 0);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::String> payload) {
    fbb_.AddOffset(Echo::VT_PAYLOAD, payload);
  }
  explicit EchoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EchoBuilder &operator=(const EchoBuilder &);
  flatbuffers::Offset<Echo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Echo>(end);
    return o;
  }
};

inline flatbuffers::Offset<Echo> CreateEcho(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    uint32_t time = 0,
    flatbuffers::Offset<flatbuffers::String> payload = 0) {
  EchoBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_time(time);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Echo> CreateEchoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    uint32_t time = 0,
    const char *payload = nullptr) {
  auto payload__ = payload ? _fbb.CreateString(payload) : 0;
  return event::CreateEcho(
      _fbb,
      id,
      time,
      payload__);
}

struct UserEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserEventBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return UserEventTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_NAME = 6
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct UserEventBuilder {
  typedef UserEvent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(UserEvent::VT_UID, uid, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(UserEvent::VT_NAME, name);
  }
  explicit UserEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UserEventBuilder &operator=(const UserEventBuilder &);
  flatbuffers::Offset<UserEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserEvent> CreateUserEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  UserEventBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_uid(uid);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserEvent> CreateUserEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return event::CreateUserEvent(
      _fbb,
      uid,
      name__);
}

struct ObjectUpdateEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ObjectUpdateEventBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ObjectUpdateEventTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_COLOR = 8,
    VT_POINTS = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  event::ObjectType type() const {
    return static_cast<event::ObjectType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const event::Color *color() const {
    return GetStruct<const event::Color *>(VT_COLOR);
  }
  const flatbuffers::Vector<const event::Point *> *points() const {
    return GetPointer<const flatbuffers::Vector<const event::Point *> *>(VT_POINTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<event::Color>(verifier, VT_COLOR) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           verifier.EndTable();
  }
};

struct ObjectUpdateEventBuilder {
  typedef ObjectUpdateEvent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(ObjectUpdateEvent::VT_ID, id, 0);
  }
  void add_type(event::ObjectType type) {
    fbb_.AddElement<int8_t>(ObjectUpdateEvent::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_color(const event::Color *color) {
    fbb_.AddStruct(ObjectUpdateEvent::VT_COLOR, color);
  }
  void add_points(flatbuffers::Offset<flatbuffers::Vector<const event::Point *>> points) {
    fbb_.AddOffset(ObjectUpdateEvent::VT_POINTS, points);
  }
  explicit ObjectUpdateEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ObjectUpdateEventBuilder &operator=(const ObjectUpdateEventBuilder &);
  flatbuffers::Offset<ObjectUpdateEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ObjectUpdateEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<ObjectUpdateEvent> CreateObjectUpdateEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    event::ObjectType type = event::ObjectType_Line,
    const event::Color *color = 0,
    flatbuffers::Offset<flatbuffers::Vector<const event::Point *>> points = 0) {
  ObjectUpdateEventBuilder builder_(_fbb);
  builder_.add_points(points);
  builder_.add_color(color);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<ObjectUpdateEvent> CreateObjectUpdateEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    event::ObjectType type = event::ObjectType_Line,
    const event::Color *color = 0,
    const std::vector<event::Point> *points = nullptr) {
  auto points__ = points ? _fbb.CreateVectorOfStructs<event::Point>(*points) : 0;
  return event::CreateObjectUpdateEvent(
      _fbb,
      id,
      type,
      color,
      points__);
}

struct ObjectAddPointsEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ObjectAddPointsEventBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ObjectAddPointsEventTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POINTS = 6
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::Vector<const event::Point *> *points() const {
    return GetPointer<const flatbuffers::Vector<const event::Point *> *>(VT_POINTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           verifier.EndTable();
  }
};

struct ObjectAddPointsEventBuilder {
  typedef ObjectAddPointsEvent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(ObjectAddPointsEvent::VT_ID, id, 0);
  }
  void add_points(flatbuffers::Offset<flatbuffers::Vector<const event::Point *>> points) {
    fbb_.AddOffset(ObjectAddPointsEvent::VT_POINTS, points);
  }
  explicit ObjectAddPointsEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ObjectAddPointsEventBuilder &operator=(const ObjectAddPointsEventBuilder &);
  flatbuffers::Offset<ObjectAddPointsEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ObjectAddPointsEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<ObjectAddPointsEvent> CreateObjectAddPointsEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<const event::Point *>> points = 0) {
  ObjectAddPointsEventBuilder builder_(_fbb);
  builder_.add_points(points);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<ObjectAddPointsEvent> CreateObjectAddPointsEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const std::vector<event::Point> *points = nullptr) {
  auto points__ = points ? _fbb.CreateVectorOfStructs<event::Point>(*points) : 0;
  return event::CreateObjectAddPointsEvent(
      _fbb,
      id,
      points__);
}

struct ObjectDeleteEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ObjectDeleteEventBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ObjectDeleteEventTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct ObjectDeleteEventBuilder {
  typedef ObjectDeleteEvent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(ObjectDeleteEvent::VT_ID, id, 0);
  }
  explicit ObjectDeleteEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ObjectDeleteEventBuilder &operator=(const ObjectDeleteEventBuilder &);
  flatbuffers::Offset<ObjectDeleteEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ObjectDeleteEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<ObjectDeleteEvent> CreateObjectDeleteEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0) {
  ObjectDeleteEventBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline bool VerifyEventUnion(flatbuffers::Verifier &verifier, const void *obj, EventUnion type) {
  switch (type) {
    case EventUnion_NONE: {
      return true;
    }
    case EventUnion_CursorEvent: {
      return verifier.Verify<event::CursorEvent>(static_cast<const uint8_t *>(obj), 0);
    }
    case EventUnion_ObjectUpdateEvent: {
      auto ptr = reinterpret_cast<const event::ObjectUpdateEvent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventUnion_ObjectAddPointsEvent: {
      auto ptr = reinterpret_cast<const event::ObjectAddPointsEvent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventUnion_ObjectDeleteEvent: {
      auto ptr = reinterpret_cast<const event::ObjectDeleteEvent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventUnion_UserEvent: {
      auto ptr = reinterpret_cast<const event::UserEvent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventUnion_Echo: {
      auto ptr = reinterpret_cast<const event::Echo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyEventUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEventUnion(
        verifier,  values->Get(i), types->GetEnum<EventUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const flatbuffers::TypeTable *EventUnionTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 },
    { flatbuffers::ET_SEQUENCE, 0, 4 },
    { flatbuffers::ET_SEQUENCE, 0, 5 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    event::CursorEventTypeTable,
    event::ObjectUpdateEventTypeTable,
    event::ObjectAddPointsEventTypeTable,
    event::ObjectDeleteEventTypeTable,
    event::UserEventTypeTable,
    event::EchoTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "CursorEvent",
    "ObjectUpdateEvent",
    "ObjectAddPointsEvent",
    "ObjectDeleteEvent",
    "UserEvent",
    "Echo"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_UNION, 7, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ObjectTypeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    event::ObjectTypeTypeTable
  };
  static const char * const names[] = {
    "Line",
    "PolyLine",
    "Rectangle",
    "Circle"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 4, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *MessageTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UTYPE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    event::EventUnionTypeTable
  };
  static const char * const names[] = {
    "event_type",
    "event",
    "kut"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *EchoTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "id",
    "time",
    "payload"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *UserEventTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "uid",
    "name"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *CursorEventTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const int64_t values[] = { 0, 4, 8, 12 };
  static const char * const names[] = {
    "x",
    "y",
    "uid"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 3, type_codes, nullptr, values, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *PointTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_USHORT, 0, -1 },
    { flatbuffers::ET_USHORT, 0, -1 }
  };
  static const int64_t values[] = { 0, 2, 4 };
  static const char * const names[] = {
    "x",
    "y"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 2, type_codes, nullptr, values, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ColorTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const int64_t values[] = { 0, 1, 2, 3 };
  static const char * const names[] = {
    "r",
    "g",
    "b"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 3, type_codes, nullptr, values, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ObjectUpdateEventTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 1, 2 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    event::ObjectTypeTypeTable,
    event::ColorTypeTable,
    event::PointTypeTable
  };
  static const char * const names[] = {
    "id",
    "type",
    "color",
    "points"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ObjectAddPointsEventTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    event::PointTypeTable
  };
  static const char * const names[] = {
    "id",
    "points"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ObjectDeleteEventTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const char * const names[] = {
    "id"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const event::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<event::Message>(buf);
}

inline const event::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<event::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<event::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<event::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<event::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<event::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace event

#endif  // FLATBUFFERS_GENERATED_MESSAGES_EVENT_H_
